name: Build Android APK

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:  # Allows manual trigger from GitHub UI

env:
  PYTHON_VERSION: '3.9'
  JAVA_VERSION: '17'
  NDK_VERSION: '25b'
  BUILDOZER_VERSION: '1.5.0'
  CYTHON_VERSION: '0.29.33'
  KIVY_VERSION: '2.3.0'

jobs:
  build:
    name: Build Android APK
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper versioning
          
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'gradle'
          
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            gcc \
            g++ \
            git \
            zip \
            unzip \
            openjdk-17-jdk \
            python3-pip \
            python3-dev \
            autoconf \
            libtool \
            pkg-config \
            zlib1g-dev \
            libncurses5-dev \
            libgdbm-dev \
            libnss3-dev \
            libssl-dev \
            libreadline-dev \
            libffi-dev \
            libsqlite3-dev \
            libbz2-dev \
            libxml2-dev \
            libxslt1-dev \
            libjpeg-dev \
            libpng-dev \
            libffi-dev \
            libssl-dev \
            ffmpeg \
            libsdl2-dev \
            libsdl2-image-dev \
            libsdl2-mixer-dev \
            libsdl2-ttf-dev \
            libportmidi-dev \
            libswscale-dev \
            libavformat-dev \
            libavcodec-dev \
            virtualenv \
            gstreamer1.0-plugins-{bad,base,good,ugly} \
            gstreamer1.0-{tools,x} \
            autoconf-archive

      - name: Cache Android NDK
        uses: actions/cache@v3
        id: cache-ndk
        with:
          path: android-ndk-r${{ env.NDK_VERSION }}
          key: ${{ runner.os }}-ndk-r${{ env.NDK_VERSION }}

      - name: Download Android NDK
        if: steps.cache-ndk.outputs.cache-hit != 'true'
        run: |
          wget https://dl.google.com/android/repository/android-ndk-r${{ env.NDK_VERSION }}-linux.zip
          unzip android-ndk-r${{ env.NDK_VERSION }}-linux.zip

      - name: Set up Android NDK
        run: |
          echo "ANDROIDNDK=$PWD/android-ndk-r${{ env.NDK_VERSION }}" >> $GITHUB_ENV
          echo "ANDROIDSDK=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
          echo "ANDROIDAPI=33" >> $GITHUB_ENV
          echo "ANDROIDMINAPI=21" >> $GITHUB_ENV

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install --upgrade \
            buildozer==${{ env.BUILDOZER_VERSION }} \
            cython==${{ env.CYTHON_VERSION }} \
            kivy==${{ env.KIVY_VERSION }} \
            kivymd \
            pillow \
            requests \
            python-for-android

      - name: Set up build environment variables
        run: |
          echo "PATH=$PATH:$ANDROIDNDK" >> $GITHUB_ENV
          echo "JAVA_HOME=$JAVA_HOME_${{ env.JAVA_VERSION }}_X64" >> $GITHUB_ENV
          export CC=gcc
          export CXX=g++
          export CFLAGS="-fPIC"
          export LDFLAGS="-L/usr/lib"
          export PYTHONPATH=$PYTHONPATH:$PWD

      - name: Check buildozer.spec exists
        run: |
          if [ ! -f "buildozer.spec" ]; then
            echo "Creating default buildozer.spec"
            buildozer init
          fi

      - name: Build APK
        id: build
        run: |
          buildozer android debug
        env:
          BUILDOZER_WARN_ON_ROOT: 1
          APP_ANDROID_ACCEPT_SDK_LICENSE: 1
          APP_ANDROID_NDK_PLATFORM: android-21

      - name: Upload debug APK
        uses: actions/upload-artifact@v3
        with:
          name: debug-apk
          path: bin/*.apk
          if-no-files-found: error

      - name: Upload build logs on failure
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: buildozer-logs
          path: |
            .buildozer/
            *.log
            **/*.log

      - name: Check APK file
        run: |
          if [ -f "bin/"*"-debug.apk" ]; then
            echo "APK built successfully"
            ls -l bin/*-debug.apk
          else
            echo "APK build failed"
            exit 1
          fi

      - name: Create Release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v1
        with:
          files: bin/*-debug.apk
          name: Debug Build ${{ github.sha }}
          tag_name: v${{ github.run_number }}
          draft: false
          prerelease: true
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
